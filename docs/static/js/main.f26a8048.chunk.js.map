{"version":3,"sources":["context/LocationContext.ts","data/cities.ts","components/location/Location.tsx","components/header/Header.tsx","helpers/Time.ts","components/weatherItem/WeatherItem.tsx","components/weather/Weather.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LocationContext","React","createContext","undefined","cities","lat","long","name","code","Location","setShowLocationForm","useContext","selectedLocation","setSelectedLocation","className","map","item","key","onClick","Header","useState","showLocationForm","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","getFormatDay","unixTimeStamp","tDate","Date","year","getFullYear","month","getMonth","day","getDate","WeatherItem","dt","temp","weather","icon","description","min","max","now","Math","round","src","alt","Weather","dailyWeather","setDailyWeather","currentWeather","setCurrentWeather","loading","setLoading","useEffect","a","apiUrl","fetch","result","json","daily","slice","getWeather","App","defaultLocation","find","x","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f26a8048.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ILocation } from './../interfaces/Location.interface';\r\n\r\nexport interface ILocationContext {\r\n    selectedLocation: ILocation;\r\n    setSelectedLocation: (value: ILocation) => void;\r\n};\r\n\r\nexport const LocationContext = React.createContext<ILocationContext|undefined>(undefined);","import { ILocation } from \"../interfaces/Location.interface\"\r\n\r\nexport const cities:ILocation[] = [\r\n        {\r\n            lat:'-34.6157437',\r\n            long:'-58.57338329',\r\n            name:'Argentina, Buenos Aires',\r\n            code:'bsas'\r\n        },\r\n        {\r\n            lat:'4.6482837',\r\n            long:'-74.2478938',\r\n            name:'Bogotá, Colombia',\r\n            code:'bgta'\r\n        },\r\n        {\r\n            lat:'-16.5205361',\r\n            long:'-68.1941186',\r\n            name:'La Paz, Bolivia',\r\n            code:'lpaz'\r\n        },\r\n        {\r\n            lat:'-12.025827',\r\n            long:'-77.2679845',\r\n            name:'Lima, Perú',\r\n            code:'lima'\r\n        },\r\n        {\r\n            lat:'-0.1859053',\r\n            long:'-78.7107455',\r\n            name:'Quito, Ecuador',\r\n            code:'qito'\r\n        },\r\n        {\r\n            lat:'-22.9132525',\r\n            long:'-43.7261833',\r\n            name:'Rio de Janeiro, Brasil',\r\n            code:'rjro'\r\n        }\r\n    ];\r\n","import React, { useContext } from 'react'\r\nimport { ILocationContext, LocationContext } from '../../context/LocationContext'\r\nimport { cities } from '../../data/cities'\r\nimport { ILocation } from '../../interfaces/Location.interface'\r\n\r\nconst Location:React.FC<any> = ({setShowLocationForm}) => {\r\n\r\n    const  {selectedLocation,setSelectedLocation}:ILocationContext = useContext(LocationContext)!;\r\n\r\n    const {code} = selectedLocation;\r\n\r\n\r\n    const handleClick=(city:ILocation)=>{\r\n        setSelectedLocation(city);\r\n        setShowLocationForm(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-1 flex-col\">\r\n            <div className=\"w-full my-3 mb-3\">\r\n                <p\r\n                    className=\"ml-2 block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\">\r\n                    Ciudades\r\n                </p>\r\n                <ul>\r\n\r\n                    {\r\n                        cities.map(item=>\r\n                            <li \r\n                                key={item.code} \r\n                                className={`hover:bg-indigo-400 hover:text-white p-2 cursor-pointer\r\n                                            ${code===item.code?'bg-indigo-500 text-white':''}\r\n                                            `} \r\n                                onClick={()=>handleClick(item)}\r\n                            >\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    }\r\n\r\n\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Location\r\n","import React, { useState } from 'react'\r\nimport Location from '../location/Location'\r\n\r\nconst Header= () => {\r\n    const [showLocationForm, setShowLocationForm] = useState(false);\r\n    return (\r\n        <header className=\"bg-indigo-400 w-full flex flex-row justify-center py-4 fixed\">\r\n            <div className=\"flex flex-1 justify-center\">\r\n                <h1 className=\"text-2xl text-indigo-100 font-bold\">Weather App</h1>\r\n                \r\n                <nav className=\"absolute right-0 mr-8\">\r\n                    <div className=\"relative\">    \r\n                        <button className=\"p-2 border rounded bg-indigo-400 focus:outline-none\"\r\n                                onClick={()=>setShowLocationForm(!showLocationForm)}>\r\n                            <svg className=\"w-6 h-6 text-gray-200\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" /><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" /></svg>\r\n                        </button>\r\n                        {showLocationForm &&\r\n                            <div className=\"bg-white rounded p-2 shadow-xl absolute right-0 mt-1 w-64\">\r\n                                <Location setShowLocationForm={setShowLocationForm}/>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","export const getFormatDay= (unixTimeStamp:number)=>{\r\n    const tDate = new Date(unixTimeStamp * 1000);\r\n    const months = ['01','02','03','04','05','06','07','08','09','10','11','12'];\r\n    const year = tDate.getFullYear();\r\n    const month = months[tDate.getMonth()];\r\n    const day = tDate.getDate();\r\n\r\n    return `${day}-${month}-${year}`;\r\n}","import React from 'react'\r\nimport { getFormatDay } from '../../helpers/Time';\r\nimport { IDailyWeather } from '../../interfaces/DailyWeather.interface'\r\n\r\nconst WeatherItem: React.FC<IDailyWeather> = ({dt,temp,weather}) => {\r\n    const {icon, description} = weather[0];\r\n    const {min,max}= temp;\r\n    return (\r\n        <div className=\"m-2 shadow-xl bg-white p-2 rounded flex flex-col items-center justify-center\">\r\n            {getFormatDay(dt)===getFormatDay(Date.now()/1000)?\r\n                <p className=\"text-gray-600 font-bold mb-2\">Hoy</p>:\r\n                <p className=\"text-gray-600 font-bold mb-2\">{getFormatDay(dt)}</p>\r\n            }\r\n            <div className=\"flex\">\r\n            <p className=\"font-bold text-blue-500 p-1\">{Math.round(min)}°C</p>\r\n            <p className=\"font-bold text-red-600 p-1\">{Math.round(max)}°C</p>\r\n            </div>\r\n            <div>\r\n                <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"weather\"/>\r\n            </div>\r\n            <div>\r\n                <p className=\"text-sm text-gray-600\">{description}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherItem\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { ILocationContext, LocationContext } from '../../context/LocationContext';\r\nimport { IDailyWeather } from '../../interfaces/DailyWeather.interface';\r\nimport WeatherItem from '../weatherItem/WeatherItem';\r\n\r\n\r\n\r\nconst Weather = () => {\r\n\r\n    const [dailyWeather, setDailyWeather] = useState([])\r\n    const [currentWeather, setCurrentWeather] = useState<IDailyWeather>();\r\n    const [loading, setLoading] = useState(false);\r\n    const  {selectedLocation,setSelectedLocation}:ILocationContext = useContext(LocationContext)!;\r\n\r\n    const {name,lat,long} = selectedLocation;\r\n\r\n    useEffect(() => {   \r\n        const getWeather = async()=>{\r\n            setLoading(true);\r\n            const apiKey = '43f645eb5c838f7270e1f78893a2c271';\r\n            const apiUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=hourly,current,minutely,alerts&units=metric&lang=es&appid=${apiKey}`;\r\n            const result = await fetch(apiUrl);\r\n            const weather = await result.json();\r\n            const {daily} = weather;\r\n            setCurrentWeather({...daily[0]});\r\n            setDailyWeather(daily.slice(1,6));\r\n            setLoading(false);\r\n        }\r\n\r\n        getWeather();\r\n        \r\n\r\n    }, [lat,long]);\r\n\r\n    return (\r\n        <>\r\n        {loading ?\r\n            <div className=\"flex items-center  justify-center\">\r\n                <p className=\"font-bold text-indigo-600 text-2xl animate-pulse\">Obteniendo datos del clima...</p>\r\n            </div>\r\n        :\r\n        <div className=\"flex flex-col flex-1\">\r\n            <p className=\"italic text-center text-indigo-500 mb-3\">Clima para la ciudad de <span className=\"font-bold\">{name}</span></p>\r\n            \r\n            <div className=\"mb-5 flex items-center justify-center\">\r\n                <div className=\"w-10/12 lg:w-64\">\r\n                {currentWeather && <WeatherItem  {...currentWeather}/>}\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"flex flex-col lg:flex-row flex-1 items-center justify-center\">\r\n                \r\n                    {dailyWeather.map((item:IDailyWeather)=>(\r\n                        <div className=\"w-48\" key={item.dt}>\r\n                            <WeatherItem  {...item}/>\r\n                        </div>\r\n                    ))}\r\n                \r\n            </div>\r\n\r\n\r\n            \r\n        </div>\r\n\r\n        \r\n        \r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n","import React, { useState } from 'react';\r\nimport Header from './components/header/Header';\r\nimport Weather from './components/weather/Weather';\r\nimport { LocationContext } from './context/LocationContext';\r\nimport { cities } from './data/cities';\r\nimport { ILocation } from './interfaces/Location.interface';\r\n\r\nfunction App() {\r\n\r\n  const defaultLocation:ILocation = cities.find(x=>x.code ==='bsas')!;\r\n  \r\n  const [selectedLocation, setSelectedLocation] = useState(defaultLocation);\r\n\r\n  return (\r\n        <LocationContext.Provider value={{selectedLocation, setSelectedLocation}}>\r\n          <div className=\"overflow-auto bg-gray-300 h-screen\">\r\n            <Header />\r\n            <div className=\"flex flex-col mt-24\">\r\n              <Weather/>\r\n            </div>\r\n          </div>\r\n        </LocationContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './tailwind.output.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}